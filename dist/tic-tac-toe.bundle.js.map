{"version":3,"names":[],"mappings":"","sources":["tic-tac-toe.bundle.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n(function () {\n    'use strict';\n\n    angular.module('ticTacToe', []);\n})();\n(function () {\n    'use strict';\n\n    angular.module('ticTacToe', []);\n})();\n(function () {\n    'use strict';\n\n    angular.module('ticTacToe').service('MoveService', MoveService);\n\n    MoveService.$inject = [];\n\n    function MoveService() {\n        var MoveService = this;\n\n        function Move(where, points) {\n            var Move = this;\n\n            Move.points = points;\n            Move.where = where;\n\n            Move.getPoints = function () {\n                return this.points;\n            };\n\n            Move.getWhere = function () {\n                return this.where;\n            };\n        }\n\n        MoveService.getMove = getMove;\n        function getMove(where, points) {\n            return new Move(where, points);\n        }\n\n        MoveService.reset = reset;\n        function reset() {}\n\n        MoveService.reset();\n\n        return MoveService;\n    }\n})();\n(function () {\n    'use strict';\n\n    angular.module('ticTacToe').service('NodeService', NodeService);\n\n    NodeService.$inject = ['TicTacToeService'];\n\n    function NodeService(TicTacToeService) {\n        var NodeService = this;\n\n        function Node(cells, value, move, parent) {\n            var Node = this;\n\n            Node.children = [];\n            Node.move = typeof move === 'undefined' ? null : move;\n            Node.parent = typeof parent === 'undefined' ? null : parent;\n            Node.cells = cells;\n            Node.value = value;\n\n            Node.expand = function () {\n                var availableMoves = TicTacToeService.getAvailableMoves(this.cells);\n\n                var childrenValue = TicTacToeService.getOtherValue(this.value);\n\n                var numberOfAvailableMoves = availableMoves.length;\n\n                for (var i = 0; i < numberOfAvailableMoves; i++) {\n                    var move = availableMoves[i];\n\n                    var tempCells = angular.copy(this.cells);\n                    tempCells[move] = childrenValue;\n\n                    var newChild = NodeService.getNode(tempCells, childrenValue, move, this);\n\n                    this.children.push(newChild);\n                }\n\n                var childCount = this.children.length;\n\n                for (var j = 0; j < childCount; j++) {\n                    var winner = TicTacToeService.getWinner(this.children[j].getCells());\n\n                    if (winner === null) {\n                        this.children[j].expand();\n                    }\n                }\n            };\n\n            Node.getCells = function () {\n                return this.cells;\n            };\n\n            Node.getMove = function () {\n                return this.move;\n            };\n\n            Node.getPoints = function (value) {\n                var points = 0;\n\n                var winner = TicTacToeService.getWinner(this.getCells());\n\n                if (winner !== null) {\n                    if (winner === value) {\n                        points = 1;\n                    } else if (winner === TicTacToeService.getOtherValue(value)) {\n                        points = -1;\n                    } else {\n                        points = 0;\n                    }\n\n                    return points;\n                }\n\n                var childCount = this.children.length;\n                for (var i = 0; i < childCount; i++) {\n                    var child = this.children[i];\n\n                    points += child.getPoints(value);\n                }\n\n                return points;\n            };\n        }\n\n        NodeService.getNode = getNode;\n        function getNode(cells, value, move, parent) {\n            return new Node(cells, value, move, parent);\n        }\n\n        NodeService.reset = reset;\n        function reset() {}\n\n        NodeService.reset();\n\n        return NodeService;\n    }\n})();\n(function () {\n    'use strict';\n\n    angular.module('ticTacToe').service('OpponentService', OpponentService);\n\n    OpponentService.$inject = ['$q', 'TreeService'];\n\n    function OpponentService($q, TreeService) {\n        var OpponentService = this;\n\n        OpponentService.makeMove = makeMove;\n        function makeMove(value, cells, difficulty) {\n            return $q.resolve().then(function () {\n                // if (typeof difficulty === 'undefined' || difficulty === 'easy') {\n                //     return OpponentService.makeEasyMove(value, cells);\n                // } else if (difficulty === 'hard') {\n                return OpponentService.makeHardMove(value, cells);\n                // }\n            });\n        }\n\n        OpponentService.makeHardMove = makeHardMove;\n        function makeHardMove(value, cells) {\n            var tree = TreeService.getTree(cells, value);\n\n            tree.expand();\n\n            var moves = tree.getMoves();\n            var moveCount = moves.length;\n\n            var best = null;\n            var bestValue = Number.NEGATIVE_INFINITY;\n\n            for (var i = 0; i < moveCount; i++) {\n                var move = moves[i];\n\n                var candidateValue = move.getPoints();\n                if (candidateValue > bestValue) {\n                    best = move.getWhere();\n                    bestValue = move.getPoints();\n                }\n            }\n\n            return best;\n        }\n\n        OpponentService.makeEasyMove = makeEasyMove;\n        function makeEasyMove(value, cells) {\n            do {\n                var random = Math.round(Math.random() * 9);\n\n                if (cells[random] === -1 && cells[random] !== value) {\n                    return random;\n                }\n            } while (true);\n        }\n\n        OpponentService.reset = reset;\n        function reset() {}\n\n        OpponentService.reset();\n\n        return OpponentService;\n    }\n})();\n(function () {\n    'use strict';\n\n    angular.module('ticTacToe').service('TicTacToeService', TicTacToeService);\n\n    TicTacToeService.$inject = [];\n\n    function TicTacToeService() {\n        var TicTacToeService = this;\n\n        TicTacToeService.getAvailableMoves = getAvailableMoves;\n        function getAvailableMoves(cells) {\n            var availableMoves = [];\n\n            for (var i = 0; i < 9; i++) {\n                if (cells[i] === -1) {\n                    availableMoves.push(i);\n                }\n            }\n\n            return availableMoves;\n        }\n\n        TicTacToeService.getWinner = getWinner;\n        function getWinner(cells) {\n            // Horizontal\n            if (cells[0] !== -1 && cells[0] === cells[1] && cells[1] === cells[2]) {\n                return cells[0];\n            } else if (cells[3] !== -1 && cells[3] === cells[4] && cells[4] === cells[5]) {\n                return cells[3];\n            } else if (cells[6] !== -1 && cells[6] === cells[7] && cells[7] === cells[8]) {\n                return cells[6];\n            }\n\n            // Vertical\n            if (cells[0] !== -1 && cells[0] === cells[3] && cells[3] === cells[6]) {\n                return cells[0];\n            } else if (cells[1] !== -1 && cells[1] === cells[4] && cells[4] === cells[7]) {\n                return cells[1];\n            } else if (cells[2] !== -1 && cells[2] === cells[5] && cells[5] === cells[8]) {\n                return cells[2];\n            }\n\n            // Diagonal\n            if (cells[0] !== -1 && cells[0] === cells[4] && cells[4] === cells[8]) {\n                return cells[0];\n            } else if (cells[2] !== -1 && cells[2] === cells[4] && cells[4] === cells[6]) {\n                return cells[2];\n            }\n\n            for (var i = 0; i < 9; i++) {\n                if (cells[i] === -1) {\n                    return null;\n                }\n            }\n\n            return -1;\n        }\n\n        TicTacToeService.getOtherValue = getOtherValue;\n        function getOtherValue(value) {\n            return value === 1 ? 0 : 1;\n        }\n\n        TicTacToeService.reset = reset;\n        function reset() {}\n\n        TicTacToeService.reset();\n\n        return TicTacToeService;\n    }\n})();\n(function () {\n    'use strict';\n\n    angular.module('ticTacToe').service('TreeService', TreeService);\n\n    TreeService.$inject = ['MoveService', 'NodeService'];\n\n    function TreeService(MoveService, NodeService) {\n        var TreeService = this;\n\n        function Tree(cells, value) {\n            var Tree = this;\n\n            Tree.parentNode = NodeService.getNode(cells, value);\n\n            Tree.expand = function () {\n                Tree.parentNode.expand();\n            };\n\n            Tree.getMoves = function () {\n                var moves = [];\n\n                var childCount = this.parentNode.children.length;\n\n                for (var i = 0; i < childCount; i++) {\n                    var child = this.parentNode.children[i];\n\n                    var points = child.getPoints(this.parentNode.value);\n\n                    var move = MoveService.getMove(child.getMove(), points);\n\n                    moves.push(move);\n                }\n\n                return moves;\n            };\n        }\n\n        TreeService.getTree = getTree;\n        function getTree(cells, value) {\n            return new Tree(cells, value);\n        }\n\n        TreeService.reset = reset;\n        function reset() {}\n\n        TreeService.reset();\n\n        return TreeService;\n    }\n})();\n(function () {\n    'use strict';\n\n    angular.module('ticTacToe').controller('TicTacToeController', TicTacToeController);\n\n    TicTacToeController.$inject = ['OpponentService', 'TicTacToeService'];\n\n    function TicTacToeController(OpponentService, TicTacToeService) {\n        var TicTacToeController = this;\n\n        TicTacToeController.beginOpponentsTurn = beginOpponentsTurn;\n        function beginOpponentsTurn() {\n            return OpponentService.makeMove(TicTacToeController.opponenentValue, TicTacToeController.cells).then(function (cell) {\n                if (cell !== null) {\n                    TicTacToeController.cells[cell] = TicTacToeController.opponenentValue;\n\n                    TicTacToeController.switchTurn();\n                }\n            });\n        }\n\n        TicTacToeController.beginUsersTurn = beginUsersTurn;\n        function beginUsersTurn() {\n            TicTacToeController.showMessage(false, 'IT IS YOUR TURN.');\n        }\n\n        TicTacToeController.select = select;\n        function select(cell) {\n            if (TicTacToeController.isGameOver) {\n                TicTacToeController.showMessage(false, 'THE GAME IS ALREADY OVER.');\n            } else if (TicTacToeController.isUsersTurn) {\n                if (TicTacToeController.cells[cell] === -1) {\n                    TicTacToeController.cells[cell] = TicTacToeController.userValue;\n\n                    TicTacToeController.switchTurn();\n                } else {\n                    TicTacToeController.showMessage(false, 'YOU CANNOT GO THERE!');\n                }\n            } else {\n                TicTacToeController.showMessage(false, 'SIMMER DOWN! IT\\'S MY TURN STILL!');\n            }\n        }\n\n        TicTacToeController.setOrder = setOrder;\n        function setOrder() {\n            var random = Math.floor(Math.random() * 100);\n            if (random % 2 === 0) {\n                TicTacToeController.opponenentValue = 0;\n                TicTacToeController.userValue = 1;\n                TicTacToeController.isUsersTurn = true;\n            } else {\n                TicTacToeController.opponenentValue = 1;\n                TicTacToeController.userValue = 0;\n                TicTacToeController.isUsersTurn = false;\n            }\n        }\n\n        TicTacToeController.showMessage = showMessage;\n        function showMessage(fromUser, message) {\n            var selector = fromUser ? '.user' : '.opponent';\n\n            $(selector).attr('data-content', message).popover('show');\n        }\n\n        TicTacToeController.start = start;\n        function start() {\n            TicTacToeController.setOrder();\n\n            if (TicTacToeController.isUsersTurn) {\n                TicTacToeController.beginUsersTurn();\n            } else {\n                TicTacToeController.beginOpponentsTurn();\n            }\n        }\n\n        TicTacToeController.switchTurn = switchTurn;\n        function switchTurn() {\n            var winner = TicTacToeService.getWinner(TicTacToeController.cells);\n\n            if (winner === TicTacToeController.opponenentValue) {\n                TicTacToeController.isGameOver = true;\n\n                TicTacToeController.showMessage(false, 'HAHA LOSER.');\n            } else if (winner === TicTacToeController.userValue) {\n                TicTacToeController.isGameOver = true;\n\n                TicTacToeController.showMessage(false, 'GOOD JOB.');\n            } else if (winner === -1) {\n                TicTacToeController.isGameOver = true;\n\n                TicTacToeController.showMessage(false, 'WE TIED.');\n\n                TicTacToeController.showMessage(true, 'WE TIED.');\n            } else {\n                TicTacToeController.isUsersTurn = !TicTacToeController.isUsersTurn;\n\n                if (TicTacToeController.isUsersTurn) {\n                    TicTacToeController.beginUsersTurn();\n                } else {\n                    TicTacToeController.beginOpponentsTurn();\n                }\n            }\n        }\n\n        TicTacToeController.reset = reset;\n        function reset() {\n            TicTacToeController.cells = [-1, -1, -1, -1, -1, -1, -1, -1, -1];\n\n            TicTacToeController.isGameOver = false;\n\n            TicTacToeController.opponenentValue = 1;\n\n            TicTacToeController.stats = false;\n\n            TicTacToeController.userValue = 0;\n\n            TicTacToeController.isUsersTurn = false;\n        }\n\n        TicTacToeController.init = init;\n        function init() {\n            TicTacToeController.reset();\n            TicTacToeController.start();\n        }\n\n        TicTacToeController.init();\n    }\n})();\n(function () {\n    'use strict';\n\n    angular.module('ticTacToe').directive('ticTacToe', ticTacToe);\n\n    function ticTacToe() {\n        return {\n            controller: 'TicTacToeController',\n            controllerAs: 'ctrl',\n            restrict: 'E',\n            scope: {},\n            template: '<div class=\"global\"><div class=\"players row\"><a class=\"opponent col-6\" tabindex=\"0\" data-content data-placement=\"right\" data-toggle=\"popover\" data-trigger=\"focus\"><img src=\"img/opponent.png\"></a> <a class=\"user col-6\" tabindex=\"1\" data-content data-placement=\"left\" data-toggle=\"popover\" data-trigger=\"focus\"><img src=\"img/user.png\"></a></div><div class=\"board row\"><div data-ng-repeat=\"cell in ctrl.cells track by $index\" class=\"col-4 cell\" data-ng-class=\"{ \\'empty-cell\\': cell === -1, \\'opponent-x-cell\\': cell === 0 && ctrl.opponenentValue === 0, \\'opponent-o-cell\\': cell === 1 && ctrl.opponenentValue === 1, \\'user-x-cell\\': cell === 0 && ctrl.userValue === 0, \\'user-o-cell\\': cell === 1 && ctrl.userValue === 1 }\" data-ng-click=\"ctrl.select($index)\"></div></div></div>'\n        };\n    }\n})();\n\n},{}]},{},[1]);\n"],"file":"tic-tac-toe.bundle.js"}