{"version":3,"sources":["tic-tac-toe.min.js"],"names":["angular","module","MoveService","this","Move","where","points","getPoints","getWhere","getMove","reset","service","$inject","NodeService","TicTacToeService","Node","cells","value","move","parent","children","expand","availableMoves","getAvailableMoves","childrenValue","getOtherValue","numberOfAvailableMoves","length","i","tempCells","copy","newChild","getNode","push","childCount","j","getWinner","getCells","winner","OpponentService","$q","TreeService","makeMove","difficulty","resolve","then","makeHardMove","tree","getTree","moves","getMoves","moveCount","best","bestValue","Number","NEGATIVE_INFINITY","candidateValue","makeEasyMove","random","Math","round","Tree","parentNode","child","TicTacToeController","beginOpponentsTurn","opponenentValue","cell","switchTurn","beginUsersTurn","showMessage","select","isGameOver","isUsersTurn","userValue","setOrder","floor","fromUser","message","$","attr","popover","start","stats","init","controller","directive","controllerAs","restrict","scope","template"],"mappings":"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","file":"tic-tac-toe.min.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular.module('ticTacToe', []);\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').service(\n        'MoveService',\n        MoveService\n    );\n\n    MoveService.$inject = [];\n\n    function MoveService() {\n        var MoveService = this;\n\n        function Move(where, points) {\n            var Move = this;\n\n            Move.points = points;\n            Move.where = where;\n\n            Move.getPoints = function() {\n                return this.points;\n            };\n\n            Move.getWhere = function() {\n                return this.where;\n            };\n        }\n\n        MoveService.getMove = getMove;\n        function getMove(where, points) {\n            return new Move(where, points);\n        }\n\n        MoveService.reset = reset;\n        function reset() {\n\n        }\n        \n        MoveService.reset();\n\n        return MoveService;\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').service(\n        'NodeService',\n        NodeService\n    );\n\n    NodeService.$inject = [\n        'TicTacToeService'\n    ];\n\n    function NodeService(\n        TicTacToeService\n    ) {\n        var NodeService = this;\n\n        function Node(cells, value, move, parent) {\n            var Node = this;\n\n            Node.children = [];\n            Node.move = typeof move === 'undefined' ? null : move;\n            Node.parent = typeof parent === 'undefined' ? null : parent;\n            Node.cells = cells;\n            Node.value = value;\n\n            Node.expand = function() {\n                var availableMoves = TicTacToeService.getAvailableMoves(\n                    this.cells\n                );\n\n                var childrenValue = TicTacToeService.getOtherValue(this.value);\n\n                var numberOfAvailableMoves = availableMoves.length;\n\n                for (var i = 0; i < numberOfAvailableMoves; i++) {\n                    var move = availableMoves[i];\n\n                    var tempCells = angular.copy(this.cells);\n                    tempCells[move] = childrenValue;\n\n                    var newChild = NodeService.getNode(\n                        tempCells,\n                        childrenValue,\n                        move,\n                        this\n                    );\n\n                    this.children.push(newChild);\n                }\n\n                var childCount = this.children.length;\n\n                for (var j = 0; j < childCount; j++) {\n                    var winner = TicTacToeService.getWinner(\n                        this.children[j].getCells()\n                    );\n\n                    if (winner === null) {\n                        this.children[j].expand();\n                    }\n                }\n            };\n\n            Node.getCells = function() {\n                return this.cells;\n            };\n\n            Node.getMove = function() {\n                return this.move;\n            };\n\n            Node.getPoints = function(value) {\n                var points = 0;\n\n                var winner = TicTacToeService.getWinner(\n                    this.getCells()\n                );\n\n                if (winner !== null) {\n                    if (winner === value) {\n                        points = 1;\n                    } else if (winner === TicTacToeService.getOtherValue(value)) {\n                        points = -1;\n                    } else {\n                        points = 0;\n                    }\n\n                    return points;\n                }\n\n                var childCount = this.children.length;\n                for (var i = 0; i < childCount; i++) {\n                    var child = this.children[i];\n\n                    points += child.getPoints(value);\n                }\n\n                return points;\n            };\n        }\n\n        NodeService.getNode = getNode;\n        function getNode(cells, value, move, parent) {\n            return new Node(cells, value, move, parent);\n        }\n\n        NodeService.reset = reset;\n        function reset() {\n\n        }\n        \n        NodeService.reset();\n\n        return NodeService;\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').service(\n        'OpponentService',\n        OpponentService\n    );\n\n    OpponentService.$inject = [\n        '$q',\n        'TreeService'\n    ];\n\n    function OpponentService(\n        $q,\n        TreeService\n    ) {\n        var OpponentService = this;\n        \n        OpponentService.makeMove = makeMove;\n        function makeMove(value, cells, difficulty) {\n            return $q.resolve().then(\n                function() {\n                    // if (typeof difficulty === 'undefined' || difficulty === 'easy') {\n                    //     return OpponentService.makeEasyMove(value, cells);\n                    // } else if (difficulty === 'hard') {\n                        return OpponentService.makeHardMove(value, cells);\n                    // }\n                }\n            );\n        }\n\n        OpponentService.makeHardMove = makeHardMove;\n        function makeHardMove(value, cells) {\n            var tree = TreeService.getTree(cells, value);\n\n            tree.expand();\n\n            var moves = tree.getMoves();\n            var moveCount = moves.length;\n\n            var best = null;\n            var bestValue = Number.NEGATIVE_INFINITY;\n\n            for (var i = 0; i < moveCount; i++) {\n                var move = moves[i];\n\n                var candidateValue = move.getPoints();\n                if (candidateValue > bestValue) {\n                    best = move.getWhere();\n                    bestValue = move.getPoints();\n                }\n            }\n\n            return best;\n        }\n\n        OpponentService.makeEasyMove = makeEasyMove;\n        function makeEasyMove(value, cells) {\n            do {\n                var random = Math.round(Math.random() * 9);\n\n                if (cells[random] === -1 && cells[random] !== value) {\n                    return random;\n                }\n            } while (true);\n        }\n\n        OpponentService.reset = reset;\n        function reset() {\n\n        }\n        \n        OpponentService.reset();\n\n        return OpponentService;\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').service(\n        'TicTacToeService',\n        TicTacToeService\n    );\n\n    TicTacToeService.$inject = [];\n\n    function TicTacToeService() {\n        var TicTacToeService = this;\n\n        TicTacToeService.getAvailableMoves = getAvailableMoves;\n        function getAvailableMoves(cells) {\n            var availableMoves = [];\n\n            for (var i = 0; i < 9; i++) {\n                if (cells[i] === -1) {\n                    availableMoves.push(i);\n                }\n            }\n\n            return availableMoves;\n        }\n\n        TicTacToeService.getWinner = getWinner;\n        function getWinner(cells) {\n            // Horizontal\n            if (cells[0] !== -1 && cells[0] === cells[1] && cells[1] === cells[2]) {\n                return cells[0];\n            } else if (cells[3] !== -1 && cells[3] === cells[4] && cells[4] === cells[5]) {\n                return cells[3];\n            } else if (cells[6] !== -1 && cells[6] === cells[7] && cells[7] === cells[8]) {\n                return cells[6];\n            }\n\n            // Vertical\n            if (cells[0] !== -1 && cells[0] === cells[3] && cells[3] === cells[6]) {\n                return cells[0];\n            } else if (cells[1] !== -1 && cells[1] === cells[4] && cells[4] === cells[7]) {\n                return cells[1];\n            } else if (cells[2] !== -1 && cells[2] === cells[5] && cells[5] === cells[8]) {\n                return cells[2];\n            }\n\n            // Diagonal\n            if (cells[0] !== -1 && cells[0] === cells[4] && cells[4] === cells[8]) {\n                return cells[0];\n            } else if (cells[2] !== -1 && cells[2] === cells[4] && cells[4] === cells[6]) {\n                return cells[2];\n            }\n\n            for (var i = 0; i < 9; i++) {\n                if (cells[i] === -1) {\n                    return null;\n                }\n            }\n\n            return -1;\n        }\n\n        TicTacToeService.getOtherValue = getOtherValue;\n        function getOtherValue(value) {\n            return value === 1 ? 0 : 1;\n        }\n\n        TicTacToeService.reset = reset;\n        function reset() {\n\n        }\n        \n        TicTacToeService.reset();\n\n        return TicTacToeService;\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').service(\n        'TreeService',\n        TreeService\n    );\n\n    TreeService.$inject = [\n        'MoveService',\n        'NodeService'\n    ];\n\n    function TreeService(\n        MoveService,\n        NodeService\n    ) {\n        var TreeService = this;\n\n        function Tree(cells, value) {\n            var Tree = this;\n\n            Tree.parentNode = NodeService.getNode(cells, value);\n\n            Tree.expand = function() {\n                Tree.parentNode.expand();\n            };\n            \n            Tree.getMoves = function() {\n                var moves = [];\n                \n                var childCount = this.parentNode.children.length;\n                \n                for (var i = 0; i < childCount; i++) {\n                    var child = this.parentNode.children[i];\n                    \n                    var points = child.getPoints(\n                        this.parentNode.value\n                    );\n                    \n                    var move = MoveService.getMove(\n                        child.getMove(),\n                        points\n                    );\n                    \n                    moves.push(move);\n                }\n\n                return moves;\n            };\n        }\n\n        TreeService.getTree = getTree;\n        function getTree(cells, value) {\n            return new Tree(cells, value);\n        }\n\n        TreeService.reset = reset;\n        function reset() {\n\n        }\n        \n        TreeService.reset();\n\n        return TreeService;\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').controller(\n        'TicTacToeController',\n        TicTacToeController\n    );\n\n    TicTacToeController.$inject = [\n        'OpponentService',\n        'TicTacToeService'\n    ];\n\n    function TicTacToeController(\n        OpponentService,\n        TicTacToeService\n    ) {\n        var TicTacToeController = this;\n\n        TicTacToeController.beginOpponentsTurn = beginOpponentsTurn;\n        function beginOpponentsTurn() {\n            return OpponentService.makeMove(\n                TicTacToeController.opponenentValue,\n                TicTacToeController.cells\n            ).then(\n                function(cell) {\n                    if (cell !== null) {\n                        TicTacToeController.cells[cell] = TicTacToeController.opponenentValue;\n\n                        TicTacToeController.switchTurn();\n                    }\n                }\n            );\n        }\n\n        TicTacToeController.beginUsersTurn = beginUsersTurn;\n        function beginUsersTurn() {\n            TicTacToeController.showMessage(\n                false,\n                'IT IS YOUR TURN.'\n            );\n        }\n\n        TicTacToeController.select = select;\n        function select(cell) {\n            if (TicTacToeController.isGameOver) {\n                TicTacToeController.showMessage(\n                    false,\n                    'THE GAME IS ALREADY OVER.'\n                );\n            } else if (TicTacToeController.isUsersTurn) {\n                if (TicTacToeController.cells[cell] === -1) {\n                    TicTacToeController.cells[cell] = TicTacToeController.userValue;\n\n                    TicTacToeController.switchTurn();\n                } else {\n                    TicTacToeController.showMessage(\n                        false,\n                        'YOU CANNOT GO THERE!'\n                    );\n                }\n            } else {\n                TicTacToeController.showMessage(\n                    false,\n                    'SIMMER DOWN! IT\\'S MY TURN STILL!'\n                );\n            }\n        }\n\n        TicTacToeController.setOrder = setOrder;\n        function setOrder() {\n            var random = Math.floor(Math.random() * 100);\n            if (random % 2 === 0) {\n                TicTacToeController.opponenentValue = 0;\n                TicTacToeController.userValue = 1;\n                TicTacToeController.isUsersTurn = true;\n            } else {\n                TicTacToeController.opponenentValue = 1;\n                TicTacToeController.userValue = 0;\n                TicTacToeController.isUsersTurn = false;\n            }\n        }\n\n        TicTacToeController.showMessage = showMessage;\n        function showMessage(fromUser, message) {\n            var selector = fromUser ? '.user' : '.opponent';\n\n            $(selector).attr('data-content', message).popover('show');\n        }\n\n        TicTacToeController.start = start;\n        function start() {\n            TicTacToeController.setOrder();\n\n            if (TicTacToeController.isUsersTurn) {\n                TicTacToeController.beginUsersTurn();\n            } else {\n                TicTacToeController.beginOpponentsTurn();\n            }\n        }\n\n        TicTacToeController.switchTurn = switchTurn;\n        function switchTurn() {\n            var winner = TicTacToeService.getWinner(\n                TicTacToeController.cells\n            );\n\n            if (winner === TicTacToeController.opponenentValue) {\n                TicTacToeController.isGameOver = true;\n\n                TicTacToeController.showMessage(\n                    false,\n                    'HAHA LOSER.'\n                );\n            } else if (winner === TicTacToeController.userValue) {\n                TicTacToeController.isGameOver = true;\n\n                TicTacToeController.showMessage(\n                    false,\n                    'GOOD JOB.'\n                );\n            } else if (winner === -1) {\n                TicTacToeController.isGameOver = true;\n\n                TicTacToeController.showMessage(\n                    false,\n                    'WE TIED.'\n                );\n\n                TicTacToeController.showMessage(\n                    true,\n                    'WE TIED.'\n                );\n            } else {\n                TicTacToeController.isUsersTurn = !TicTacToeController.isUsersTurn;\n\n                if (TicTacToeController.isUsersTurn) {\n                    TicTacToeController.beginUsersTurn();\n                } else {\n                    TicTacToeController.beginOpponentsTurn();\n                }\n            }\n        }\n\n        TicTacToeController.reset = reset;\n        function reset() {\n            TicTacToeController.cells = [\n                -1, -1, -1,\n                -1, -1, -1,\n                -1, -1, -1\n            ];\n\n            TicTacToeController.isGameOver = false;\n\n            TicTacToeController.opponenentValue = 1;\n\n            TicTacToeController.stats = false;\n\n            TicTacToeController.userValue = 0;\n\n            TicTacToeController.isUsersTurn = false;\n        }\n\n        TicTacToeController.init = init;\n        function init() {\n            TicTacToeController.reset();\n            TicTacToeController.start();\n        }\n\n        TicTacToeController.init();\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').directive(\n        'ticTacToe',\n        ticTacToe\n    );\n\n    function ticTacToe() {\n        return {\n            controller:   'TicTacToeController',\n            controllerAs: 'ctrl',\n            restrict:     'E',\n            scope:        {},\n            template:'<div class=\"global\"><div class=\"players row\"><a class=\"opponent col-6\" tabindex=\"0\" data-content data-placement=\"right\" data-toggle=\"popover\" data-trigger=\"focus\"><img src=\"img/opponent.png\"></a> <a class=\"user col-6\" tabindex=\"1\" data-content data-placement=\"left\" data-toggle=\"popover\" data-trigger=\"focus\"><img src=\"img/user.png\"></a></div><div class=\"board row\"><div data-ng-repeat=\"cell in ctrl.cells track by $index\" class=\"col-4 cell\" data-ng-class=\"{ \\'empty-cell\\': cell === -1, \\'opponent-x-cell\\': cell === 0 && ctrl.opponenentValue === 0, \\'opponent-o-cell\\': cell === 1 && ctrl.opponenentValue === 1, \\'user-x-cell\\': cell === 0 && ctrl.userValue === 0, \\'user-o-cell\\': cell === 1 && ctrl.userValue === 1 }\" data-ng-click=\"ctrl.select($index)\"></div></div></div>'\n        };\n    }\n})();"]}