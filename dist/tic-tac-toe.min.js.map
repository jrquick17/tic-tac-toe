{"version":3,"sources":["tic-tac-toe.min.js"],"names":["angular","module","MessageService","this","lossMessages","tieMessages","winMessages","getLossMessage","selectMessage","getTieMessage","getWinMessage","messages","random","Math","round","length","reset","service","$inject","MoveService","Move","where","points","getPoints","getWhere","getMove","NodeService","TicTacToeService","Node","cells","value","move","parent","children","expand","availableMoves","getAvailableMoves","childrenValue","getOtherValue","numberOfAvailableMoves","i","tempCells","copy","newChild","getNode","push","childCount","j","getWinner","getCells","winner","OpponentService","$q","TreeService","getTree","tree","makeMove","difficulty","resolve","then","makeHardMove","moves","getMoves","moveCount","best","bestValue","Number","NEGATIVE_INFINITY","candidateValue","makeEasyMove","Tree","parentNode","child","BoardController","$scope","$watch","onClick","userValue","opponentValue","click","init","controller","directive","controllerAs","restrict","scope","template","GameTreeController","TicTacToeController","beginOpponentsTurn","cell","switchTurn","beginUsersTurn","showMessage","select","isGameOver","isUsersTurn","setOrder","floor","fromUser","message","$","attr","popover","start","stats"],"mappings":"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","file":"tic-tac-toe.min.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular.module('ticTacToe', []);\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').service(\n        'MessageService',\n        MessageService\n    );\n\n    MessageService.$inject = [];\n\n    function MessageService() {\n        var MessageService = this;\n\n        MessageService.lossMessages = [\n            'AW SHUCKS!',\n            'I GOT DISTRACTED...',\n            'HOW IN THE?!',\n            'ARE YOU CHEATING?',\n            'I BET YOU WON\\'T WIN AGAIN.',\n            'WE ALL GET LUCKY.',\n            'DOUBLE OR NOTHING.',\n            'REMATCH?',\n            'BEGINNER\\'S LUCK!'\n        ];\n\n        MessageService.tieMessages = [\n            'CAT!',\n            'WE TIED!',\n            'UGH THIS AGAIN.',\n            'YOU PLAY LIKE A COWARD!',\n            'WE TIED AGAIN!'\n        ];\n\n        MessageService.winMessages = [\n            'HAHA LOSER!',\n            'NEXT!',\n            '*YAWN*',\n            'THAT WAS CUTE.',\n            'IS THAT ALL YOU\\'VE GOT?'\n        ];\n\n        MessageService.getLossMessage = getLossMessage;\n        function getLossMessage() {\n            return MessageService.selectMessage(\n                MessageService.lossMessages\n            );\n        }\n\n        MessageService.getTieMessage = getTieMessage;\n        function getTieMessage() {\n            return MessageService.selectMessage(\n                MessageService.tieMessages\n            );\n        }\n\n        MessageService.getWinMessage = getWinMessage;\n        function getWinMessage() {\n            return MessageService.selectMessage(\n                MessageService.winMessages\n            );\n        }\n\n        MessageService.selectMessage = selectMessage;\n        function selectMessage(messages) {\n            var random = Math.random();\n\n            return messages[\n                Math.round(random * messages.length)\n            ];\n        }\n\n        MessageService.reset = reset;\n        function reset() {\n\n        }\n        \n        MessageService.reset();\n\n        return MessageService;\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').service(\n        'MoveService',\n        MoveService\n    );\n\n    MoveService.$inject = [];\n\n    function MoveService() {\n        var MoveService = this;\n\n        function Move(where, points) {\n            var Move = this;\n\n            Move.points = points;\n            Move.where = where;\n\n            Move.getPoints = function() {\n                return this.points;\n            };\n\n            Move.getWhere = function() {\n                return this.where;\n            };\n        }\n\n        MoveService.getMove = getMove;\n        function getMove(where, points) {\n            return new Move(where, points);\n        }\n\n        MoveService.reset = reset;\n        function reset() {\n\n        }\n        \n        MoveService.reset();\n\n        return MoveService;\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').service(\n        'NodeService',\n        NodeService\n    );\n\n    NodeService.$inject = [\n        'TicTacToeService'\n    ];\n\n    function NodeService(\n        TicTacToeService\n    ) {\n        var NodeService = this;\n\n        function Node(cells, value, move, parent) {\n            var Node = this;\n\n            Node.children = [];\n            Node.move = typeof move === 'undefined' ? null : move;\n            Node.parent = typeof parent === 'undefined' ? null : parent;\n            Node.cells = cells;\n            Node.value = value;\n\n            Node.expand = function() {\n                var availableMoves = TicTacToeService.getAvailableMoves(\n                    this.cells\n                );\n\n                var childrenValue = TicTacToeService.getOtherValue(this.value);\n\n                var numberOfAvailableMoves = availableMoves.length;\n\n                for (var i = 0; i < numberOfAvailableMoves; i++) {\n                    var move = availableMoves[i];\n\n                    var tempCells = angular.copy(this.cells);\n                    tempCells[move] = childrenValue;\n\n                    var newChild = NodeService.getNode(\n                        tempCells,\n                        childrenValue,\n                        move,\n                        this\n                    );\n\n                    this.children.push(newChild);\n                }\n\n                var childCount = this.children.length;\n\n                for (var j = 0; j < childCount; j++) {\n                    var winner = TicTacToeService.getWinner(\n                        this.children[j].getCells()\n                    );\n\n                    if (winner === null) {\n                        this.children[j].expand();\n                    }\n                }\n            };\n\n            Node.getCells = function() {\n                return this.cells;\n            };\n\n            Node.getMove = function() {\n                return this.move;\n            };\n\n            Node.getPoints = function(value) {\n                var points = 0;\n\n                var winner = TicTacToeService.getWinner(\n                    this.getCells()\n                );\n\n                if (winner !== null) {\n                    if (winner === value) {\n                        points = 1;\n                    } else if (winner === TicTacToeService.getOtherValue(value)) {\n                        points = -1;\n                    } else {\n                        points = 0;\n                    }\n\n                    return points;\n                }\n\n                var childCount = this.children.length;\n                for (var i = 0; i < childCount; i++) {\n                    var child = this.children[i];\n\n                    points += child.getPoints(value) * .5;\n                }\n\n                return points;\n            };\n        }\n\n        NodeService.getNode = getNode;\n        function getNode(cells, value, move, parent) {\n            return new Node(cells, value, move, parent);\n        }\n\n        NodeService.reset = reset;\n        function reset() {\n\n        }\n        \n        NodeService.reset();\n\n        return NodeService;\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').service(\n        'OpponentService',\n        OpponentService\n    );\n\n    OpponentService.$inject = [\n        '$q',\n        'TreeService'\n    ];\n\n    function OpponentService(\n        $q,\n        TreeService\n    ) {\n        var OpponentService = this;\n\n        OpponentService.getTree = getTree;\n        function getTree() {\n            return OpponentService.tree;\n        }\n        \n        OpponentService.makeMove = makeMove;\n        function makeMove(value, cells, difficulty) {\n            return $q.resolve().then(\n                function() {\n                    // if (typeof difficulty === 'undefined' || difficulty === 'easy') {\n                    //     return OpponentService.makeEasyMove(value, cells);\n                    // } else if (difficulty === 'hard') {\n                        return OpponentService.makeHardMove(value, cells);\n                    // }\n                }\n            );\n        }\n\n        OpponentService.makeHardMove = makeHardMove;\n        function makeHardMove(value, cells) {\n            OpponentService.tree = TreeService.getTree(cells, value);\n\n            OpponentService.tree.expand();\n\n            var moves = OpponentService.tree.getMoves();\n            var moveCount = moves.length;\n\n            var best = null;\n            var bestValue = Number.NEGATIVE_INFINITY;\n\n            for (var i = 0; i < moveCount; i++) {\n                var move = moves[i];\n\n                var candidateValue = move.getPoints();\n                if (candidateValue > bestValue) {\n                    best = move.getWhere();\n                    bestValue = move.getPoints();\n                }\n            }\n\n            return best;\n        }\n\n        OpponentService.makeEasyMove = makeEasyMove;\n        function makeEasyMove(value, cells) {\n            do {\n                var random = Math.round(Math.random() * 9);\n\n                if (cells[random] === -1 && cells[random] !== value) {\n                    return random;\n                }\n            } while (true);\n        }\n\n        OpponentService.reset = reset;\n        function reset() {\n            OpponentService.tree = {};\n        }\n        \n        OpponentService.reset();\n\n        return OpponentService;\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').service(\n        'TicTacToeService',\n        TicTacToeService\n    );\n\n    TicTacToeService.$inject = [];\n\n    function TicTacToeService() {\n        var TicTacToeService = this;\n\n        TicTacToeService.getAvailableMoves = getAvailableMoves;\n        function getAvailableMoves(cells) {\n            var availableMoves = [];\n\n            for (var i = 0; i < 9; i++) {\n                if (cells[i] === -1) {\n                    availableMoves.push(i);\n                }\n            }\n\n            return availableMoves;\n        }\n\n        TicTacToeService.getWinner = getWinner;\n        function getWinner(cells) {\n            // Horizontal\n            if (cells[0] !== -1 && cells[0] === cells[1] && cells[1] === cells[2]) {\n                return cells[0];\n            } else if (cells[3] !== -1 && cells[3] === cells[4] && cells[4] === cells[5]) {\n                return cells[3];\n            } else if (cells[6] !== -1 && cells[6] === cells[7] && cells[7] === cells[8]) {\n                return cells[6];\n            }\n\n            // Vertical\n            if (cells[0] !== -1 && cells[0] === cells[3] && cells[3] === cells[6]) {\n                return cells[0];\n            } else if (cells[1] !== -1 && cells[1] === cells[4] && cells[4] === cells[7]) {\n                return cells[1];\n            } else if (cells[2] !== -1 && cells[2] === cells[5] && cells[5] === cells[8]) {\n                return cells[2];\n            }\n\n            // Diagonal\n            if (cells[0] !== -1 && cells[0] === cells[4] && cells[4] === cells[8]) {\n                return cells[0];\n            } else if (cells[2] !== -1 && cells[2] === cells[4] && cells[4] === cells[6]) {\n                return cells[2];\n            }\n\n            for (var i = 0; i < 9; i++) {\n                if (cells[i] === -1) {\n                    return null;\n                }\n            }\n\n            return -1;\n        }\n\n        TicTacToeService.getOtherValue = getOtherValue;\n        function getOtherValue(value) {\n            return value === 1 ? 0 : 1;\n        }\n\n        TicTacToeService.reset = reset;\n        function reset() {\n\n        }\n        \n        TicTacToeService.reset();\n\n        return TicTacToeService;\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').service(\n        'TreeService',\n        TreeService\n    );\n\n    TreeService.$inject = [\n        'MoveService',\n        'NodeService'\n    ];\n\n    function TreeService(\n        MoveService,\n        NodeService\n    ) {\n        var TreeService = this;\n\n        function Tree(cells, value) {\n            var Tree = this;\n\n            Tree.parentNode = NodeService.getNode(cells, value);\n\n            Tree.expand = function() {\n                Tree.parentNode.expand();\n            };\n            \n            Tree.getMoves = function() {\n                var moves = [];\n                \n                var childCount = this.parentNode.children.length;\n                \n                for (var i = 0; i < childCount; i++) {\n                    var child = this.parentNode.children[i];\n                    \n                    var points = child.getPoints(\n                        this.parentNode.value\n                    );\n                    \n                    var move = MoveService.getMove(\n                        child.getMove(),\n                        points\n                    );\n                    \n                    moves.push(move);\n                }\n\n                return moves;\n            };\n        }\n\n        TreeService.getTree = getTree;\n        function getTree(cells, value) {\n            return new Tree(cells, value);\n        }\n\n        TreeService.reset = reset;\n        function reset() {\n\n        }\n        \n        TreeService.reset();\n\n        return TreeService;\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').controller(\n        'BoardController',\n        BoardController\n    );\n\n    BoardController.$inject = [\n        'OpponentService',\n        '$scope',\n        'TicTacToeService'\n    ];\n\n    function BoardController(\n        OpponentService,\n        $scope,\n        TicTacToeService\n    ) {\n        var BoardController = this;\n\n        $scope.$watch(\n            'cells',\n            function(cells) {\n                BoardController.cells = cells;\n            }\n        );\n\n        $scope.$watch(\n            'onClick',\n            function(onClick) {\n                BoardController.onClick = onClick;\n            }\n        );\n\n        $scope.$watch(\n            'userValue',\n            function(userValue) {\n                BoardController.opponentValue = TicTacToeService.getOtherValue(\n                    userValue\n                );\n\n                BoardController.userValue = userValue;\n            }\n        );\n\n        BoardController.click = click;\n        function click(where) {\n            BoardController.onClick(where);\n        }\n\n        BoardController.reset = reset;\n        function reset() {\n\n        }\n\n        BoardController.init = init;\n        function init() {\n            BoardController.reset();\n        }\n\n        BoardController.init();\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').directive(\n        'board',\n        board\n    );\n\n    function board() {\n        return {\n            controller:   'BoardController',\n            controllerAs: 'ctrl',\n            restrict:     'E',\n            scope:        {\n                cells:     '=',\n                onClick:   '=',\n                userValue: '='\n            },\n            template:'<div class=\"board row\"><div data-ng-repeat=\"cell in ctrl.cells track by $index\" class=\"col-4 cell\" data-ng-class=\"{ \\'empty-cell\\': cell === -1, \\'opponent-x-cell\\': cell === 0 && ctrl.opponentValue === 0, \\'opponent-o-cell\\': cell === 1 && ctrl.opponentValue === 1, \\'user-x-cell\\': cell === 0 && ctrl.userValue === 0, \\'user-o-cell\\': cell === 1 && ctrl.userValue === 1 }\" data-ng-click=\"ctrl.click($index)\"></div></div>'\n        };\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').controller(\n        'GameTreeController',\n        GameTreeController\n    );\n\n    GameTreeController.$inject = [\n        'OpponentService',\n        '$scope'\n    ];\n\n    function GameTreeController(\n        OpponentService,\n        $scope\n    ) {\n        var GameTreeController = this;\n\n        $scope.$watch(\n            function() {\n                return OpponentService.getTree();\n            },\n            function(tree) {\n                GameTreeController.tree = tree;\n            }\n        );\n\n        GameTreeController.reset = reset;\n        function reset() {\n\n        }\n\n        GameTreeController.init = init;\n        function init() {\n            GameTreeController.reset();\n        }\n\n        GameTreeController.init();\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').directive(\n        'gameTree',\n        gameTree\n    );\n\n    function gameTree() {\n        return {\n            controller:   'GameTreeController',\n            controllerAs: 'ctrl',\n            restrict:     'E',\n            scope:        {},\n            template:'<div><div class=\"row\"><board class=\"col\" cells=\"ctrl.tree.parentNode.cells\" user-value=\"ctrl.tree.parentNode.value\"></board></div><div class=\"row\" data-ng-repeat=\"child in ctrl.tree.parentNode.children\"><div class=\"col\"><board cells=\"child.cells\" user-value=\"ctrl.tree.parentNode.value\"></board></div></div></div>'\n        };\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').controller(\n        'TicTacToeController',\n        TicTacToeController\n    );\n\n    TicTacToeController.$inject = [\n        'MessageService',\n        'OpponentService',\n        'TicTacToeService'\n    ];\n\n    function TicTacToeController(\n        MessageService,\n        OpponentService,\n        TicTacToeService\n    ) {\n        var TicTacToeController = this;\n\n        TicTacToeController.beginOpponentsTurn = beginOpponentsTurn;\n        function beginOpponentsTurn() {\n            return OpponentService.makeMove(\n                TicTacToeController.opponentValue,\n                TicTacToeController.cells\n            ).then(\n                function(cell) {\n                    if (cell !== null) {\n                        TicTacToeController.cells[cell] = TicTacToeController.opponentValue;\n\n                        TicTacToeController.switchTurn();\n                    }\n                }\n            );\n        }\n\n        TicTacToeController.beginUsersTurn = beginUsersTurn;\n        function beginUsersTurn() {\n            TicTacToeController.showMessage(\n                false,\n                'IT IS YOUR TURN.'\n            );\n        }\n\n        TicTacToeController.select = select;\n        function select(cell) {\n            if (TicTacToeController.isGameOver) {\n                TicTacToeController.showMessage(\n                    false,\n                    'THE GAME IS ALREADY OVER.'\n                );\n            } else if (TicTacToeController.isUsersTurn) {\n                if (TicTacToeController.cells[cell] === -1) {\n                    TicTacToeController.cells[cell] = TicTacToeController.userValue;\n\n                    TicTacToeController.switchTurn();\n                } else {\n                    TicTacToeController.showMessage(\n                        false,\n                        'YOU CANNOT GO THERE!'\n                    );\n                }\n            } else {\n                TicTacToeController.showMessage(\n                    false,\n                    'SIMMER DOWN! IT\\'S MY TURN STILL!'\n                );\n            }\n        }\n\n        TicTacToeController.setOrder = setOrder;\n        function setOrder() {\n            var random = Math.floor(Math.random() * 100);\n            if (random % 2 === 0) {\n                TicTacToeController.opponentValue = 0;\n                TicTacToeController.userValue = 1;\n                TicTacToeController.isUsersTurn = true;\n            } else {\n                TicTacToeController.opponentValue = 1;\n                TicTacToeController.userValue = 0;\n                TicTacToeController.isUsersTurn = false;\n            }\n        }\n\n        TicTacToeController.showMessage = showMessage;\n        function showMessage(fromUser, message) {\n            var selector = fromUser ? '.user' : '.opponent';\n\n            $(selector).attr('data-content', message).popover('show');\n        }\n\n        TicTacToeController.start = start;\n        function start() {\n            TicTacToeController.setOrder();\n\n            if (TicTacToeController.isUsersTurn) {\n                TicTacToeController.beginUsersTurn();\n            } else {\n                TicTacToeController.beginOpponentsTurn();\n            }\n        }\n\n        TicTacToeController.switchTurn = switchTurn;\n        function switchTurn() {\n            var winner = TicTacToeService.getWinner(\n                TicTacToeController.cells\n            );\n\n            if (winner === TicTacToeController.opponentValue) {\n                TicTacToeController.isGameOver = true;\n\n                TicTacToeController.showMessage(\n                    false,\n                    MessageService.getWinMessage()\n                );\n            } else if (winner === TicTacToeController.userValue) {\n                TicTacToeController.isGameOver = true;\n\n                TicTacToeController.showMessage(\n                    false,\n                    MessageService.getLossMessage()\n                );\n            } else if (winner === -1) {\n                TicTacToeController.isGameOver = true;\n\n                TicTacToeController.showMessage(\n                    false,\n                    MessageService.getTieMessage()\n                );\n            } else {\n                TicTacToeController.isUsersTurn = !TicTacToeController.isUsersTurn;\n\n                if (TicTacToeController.isUsersTurn) {\n                    TicTacToeController.beginUsersTurn();\n                } else {\n                    TicTacToeController.beginOpponentsTurn();\n                }\n            }\n        }\n\n        TicTacToeController.reset = reset;\n        function reset() {\n            TicTacToeController.cells = [\n                -1, -1, -1,\n                -1, -1, -1,\n                -1, -1, -1\n            ];\n\n            TicTacToeController.isGameOver = false;\n\n            TicTacToeController.opponentValue = 1;\n\n            TicTacToeController.stats = false;\n\n            TicTacToeController.userValue = 0;\n\n            TicTacToeController.isUsersTurn = false;\n        }\n\n        TicTacToeController.init = init;\n        function init() {\n            TicTacToeController.reset();\n            TicTacToeController.start();\n        }\n\n        TicTacToeController.init();\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ticTacToe').directive(\n        'ticTacToe',\n        ticTacToe\n    );\n\n    function ticTacToe() {\n        return {\n            controller:   'TicTacToeController',\n            controllerAs: 'ctrl',\n            restrict:     'E',\n            scope:        {},\n            template:'<div class=\"global\"><div class=\"players row\"><a class=\"opponent col-6\" tabindex=\"0\" data-content data-placement=\"right\" data-toggle=\"popover\" data-trigger=\"focus\"><img src=\"img/opponent.png\"></a> <a class=\"user col-6\" tabindex=\"1\" data-content data-placement=\"left\" data-toggle=\"popover\" data-trigger=\"focus\"><img src=\"img/user.png\"></a></div><board cells=\"ctrl.cells\" on-click=\"ctrl.select\" user-value=\"ctrl.userValue\"></board><game-tree></game-tree></div>'\n        };\n    }\n})();"]}